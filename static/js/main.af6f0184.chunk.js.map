{"version":3,"sources":["img/female.svg","img/mars.svg","component/contacts/contact.js","component/contacts/contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","firstName","lastName","phone","icon","gender","className","src","contacts","Contacts","state","handleSearchChange","e","res","filter","item","toLowerCase","indexOf","target","value","setState","search","type","this","onChange","map","contactItem","Female_icon","Male_icon","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,uLCmB5BC,EAhBC,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,UAAUC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAcC,GAAU,EAAlBC,OAAkB,EAAVD,MAC/C,OACI,yBAAKE,UAAU,WACX,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,oBAAhB,IAAqCJ,EAArC,KACA,0BAAMI,UAAU,qBAAhB,IAAsCL,EAAtC,MAEJ,0BAAMK,UAAU,iBAAhB,IAAkCH,EAAlC,KAEA,yBAAKI,IAAOH,EAAME,UAAU,kB,gCCNlCE,G,MAAW,CAAC,CACdP,UAAW,uCACXC,SAAU,2EACVC,MAAO,gBACPE,OAAQ,QACT,CACCJ,UAAW,iCACXC,SAAU,+DACVC,MAAO,gBACPE,OAAQ,UACT,CACCJ,UAAW,yDACXC,SAAU,mDACVC,MAAO,iBACR,CACCF,UAAW,iCACXC,SAAU,mDACVC,MAAO,gBACPE,OAAQ,UACT,CACCJ,UAAW,uCACXC,SAAU,yDACVC,MAAO,gBACPE,OAAQ,QACT,CACCJ,UAAW,uCACXC,SAAU,6CACVC,MAAO,gBACPE,OAAQ,UAqFGI,E,4MAhFXC,MAAQ,CACJF,SAAQ,UAAOA,I,EAsCnBG,mBAAqB,SAACC,GAElB,IAAMC,EAAML,EAASM,QAAO,SAAAC,GAAI,OAC2C,IAAvEA,EAAKb,SAASc,cAAcC,QAAQL,EAAEM,OAAOC,MAAMH,iBAAiG,IAAxED,EAAKd,UAAUe,cAAcC,QAAQL,EAAEM,OAAOC,MAAMH,iBAA6F,IAApED,EAAKZ,MAAMa,cAAcC,QAAQL,EAAEM,OAAOC,MAAMH,kBAG7M,EAAKI,SAAS,CACVC,OAAQT,EAAEM,OAAOC,MACjBX,SAAS,YAAKK,M,uDAQlB,OACI,oCAQA,yBAAKP,UAAU,wBACX,2BAAOA,UAAU,gBAAgBgB,KAAK,OAAOH,MAASI,KAAKb,MAAMW,OAAQG,SAAYD,KAAKZ,sBAG7FY,KAAKb,MAAMF,SAASiB,KAAI,SAAAC,GACrB,OACI,kBAAC,EAAD,iBAAaA,EAAb,CAA0BtB,KAASsB,EAAYrB,OAAiC,WAAvBqB,EAAYrB,OAAsBsB,IAAcC,IAAa,gB,GAvEnHC,a,MCrBRC,MARf,WACE,OACE,yBAAKxB,UAAU,mBACX,kBAAC,EAAD,QCAYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af6f0184.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/female.5c87994c.svg\";","module.exports = __webpack_public_path__ + \"static/media/mars.07582995.svg\";","import React from 'react';\r\n\r\n\r\nconst Contact = ({firstName,lastName,phone,gender, icon}) => {\r\n    return (\r\n        <div className=\"contact\">\r\n            <div className=\"contact_name\">\r\n                <span className=\"contact_lastname\"> {lastName} </span>\r\n                <span className=\"contact_firstname\"> {firstName} </span>\r\n            </div>\r\n            <span className=\"contact_phone\"> {phone} </span>\r\n            {/* <span> {gender} </span> */}\r\n            <img src = {icon} className=\"gender_icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Contact;","import React, {Component} from 'react';\r\nimport Contact from './contact'\r\nimport Female_icon from \"../../img/female.svg\";\r\nimport Male_icon from \"../../img/mars.svg\";\r\nimport './contacts.css';\r\n\r\nconst contacts = [{\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\"\r\n}, {\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\"\r\n}, {\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\"\r\n}, {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\"\r\n}];\r\n\r\n\r\nclass Contacts extends Component {\r\n    state = {\r\n        contacts : [...contacts],\r\n        // isMale: true,\r\n        // isFemale: true\r\n    } \r\n\r\n    // handleFilterMale = (e) => {\r\n    //     if (this.state.isMale) {\r\n    //         const res = this.state.contacts.filter(i => i.gender===\"male\")\r\n    //         this.setState({\r\n    //             contacts: [...res],\r\n    //             isMale: !this.state.isMale\r\n    //         })\r\n    //     } else {\r\n    //         this.setState({\r\n    //             // contacts: [...contacts],\r\n    //             // const fin = this.state.contacts;\r\n    //             contacts: this.state.contacts.filter(i => i.gender !==\"male\"),\r\n    //             isMale: !this.state.isMale\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // handleFilterFemale = (e) => {\r\n    //     if (this.state.isFemale) {\r\n    //         const res = this.state.contacts.filter(i => i.gender===\"female\")\r\n    //         this.setState({\r\n    //             contacts: [...res],\r\n    //             isFemale: !this.state.isFemale\r\n    //         })\r\n    //     } else {\r\n    //         this.setState({\r\n    //             contacts: contacts.filter(i => i.gender !== 'female'),\r\n    //             // contacts: [...contacts],\r\n    //             isFemale: !this.state.isFemale\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    handleSearchChange = (e) => {\r\n        \r\n        const res = contacts.filter(item => (\r\n            item.lastName.toLowerCase().indexOf(e.target.value.toLowerCase()) !== -1 || item.firstName.toLowerCase().indexOf(e.target.value.toLowerCase()) !== -1 || item.phone.toLowerCase().indexOf(e.target.value.toLowerCase()) !== -1\r\n        ));\r\n\r\n        this.setState({\r\n            search: e.target.value,\r\n            contacts: [...res]\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            {/* <div className=\"chackbox_wrapper\">\r\n                <input type=\"checkbox\" checked={this.state.isMale} value=\"male\" onChange={this.handleFilterMale} />\r\n                <input type=\"checkbox\" checked={this.state.isFemale} value=\"female\" onChange={this.handleFilterFemale} />\r\n                {/* <input type=\"checkbox\" checked={this.state.isAll} value=\"all\" onChange={this.handleFilterAll} /> \r\n            </div> */}\r\n      \r\n\r\n            <div className=\"contact_inputwrapper\"> \r\n                <input className=\"contact_input\" type=\"text\" value = {this.state.search} onChange = {this.handleSearchChange} />\r\n            </div>\r\n            \r\n            {this.state.contacts.map(contactItem => {\r\n                return (\r\n                    <Contact {...contactItem} icon = { contactItem.gender ? (contactItem.gender === \"female\" ? Female_icon : Male_icon) : null }/>\r\n                )\r\n            })}</>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Contacts;\r\n","import React from 'react';\nimport Contacts from './component/contacts/contacts';\nimport './App.css';\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"contact_wrapper\">\n        <Contacts />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}